{"version":3,"sources":["Pages/about/index.js","Pages/example/index.js","Pages/intro/index.js","Components/navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["About","props","Grid","container","item","xs","Example","Intro","obj","content","Typography","mid","sm","map","ele","md","TabPanel","children","value","index","other","role","hidden","id","aria-labelledby","Box","p","Navbar","React","useState","startindex","setValue","navheads","tabheads","panels","tabpanels","Tabs","className","class","indicatorColor","textColor","onChange","event","newValue","centered","element","Tab","label","key","theme","createMuiTheme","status","danger","orange","error","red","success","green","palette","primary","main","blue","sub","secondary","dark","blueGrey","spacing","useStyles","makeStyles","head","color","subhead","navbar","App","classes","tabs","heads","align","variant","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3c2ba6f5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nexport default function About(props) {\r\n\treturn (\r\n\t\t<Grid container>\r\n\t\t\t<Grid item xs={12}>\r\n\t\t\t\thello\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t);\r\n}\r\nAbout.propTypes = {\r\n\tclass: PropTypes.node,\r\n\t//\ttabheads: PropTypes.any.isRequired,\r\n\t//\ttabpanels: PropTypes.any.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nexport default function Example(props) {\r\n\treturn (\r\n\t\t<Grid container>\r\n\t\t\t<Grid item xs={12}>\r\n\t\t\t\thello\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t);\r\n}\r\nExample.propTypes = {\r\n\tclass: PropTypes.node,\r\n\t//\ttabheads: PropTypes.any.isRequired,\r\n\t//\ttabpanels: PropTypes.any.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\n\r\nexport default function Intro(props) {\r\n\tconst obj = [\r\n\t\t{ content: <Typography>ok</Typography>, mid: 4, sm: 6 },\r\n\t\t{ content: <Typography>nice</Typography>, mid: 4, sm: 6 },\r\n\t\t{ content: <Typography>nice</Typography>, mid: 4, sm: 6 },\r\n\t\t{ content: <Typography>sweet</Typography>, mid: 12 },\r\n\t\t{ content: <Typography>it works</Typography> },\r\n\t];\r\n\tconst printGrid = (objects) =>\r\n\t\tobjects.map((ele) => (\r\n\t\t\t<Grid\r\n\t\t\t\titem\r\n\t\t\t\txs={12}\r\n\t\t\t\tsm={ele.sm ? ele.sm : null}\r\n\t\t\t\tmd={ele.mid ? ele.mid : null}\r\n\t\t\t>\r\n\t\t\t\t{ele.content}\r\n\t\t\t</Grid>\r\n\t\t));\r\n\r\n\treturn <Grid container>{printGrid(obj)}</Grid>;\r\n}\r\nIntro.propTypes = {\r\n\tclass: PropTypes.node,\r\n\t//\ttabheads: PropTypes.any.isRequired,\r\n\t//\ttabpanels: PropTypes.any.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Tabs, Tab, Box } from \"@material-ui/core\";\r\nfunction TabPanel(props) {\r\n\tconst { children, value, index, ...other } = props;\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\trole=\"tabpanel\"\r\n\t\t\thidden={value !== index}\r\n\t\t\tid={`simple-tabpanel-${index}`}\r\n\t\t\taria-labelledby={`simple-tab-${index}`}\r\n\t\t\t{...other}\r\n\t\t>\r\n\t\t\t{value === index && <Box p={3}>{children}</Box>}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nTabPanel.propTypes = {\r\n\tchildren: PropTypes.node,\r\n\tindex: PropTypes.any.isRequired,\r\n\tvalue: PropTypes.any.isRequired,\r\n};\r\nexport default function Navbar(props) {\r\n\tconst [value, setValue] = React.useState(props.startindex);\r\n\tconst handleChange = (event, newValue) => {\r\n\t\tsetValue(newValue);\r\n\t};\r\n\tconst navheads = props.tabheads;\r\n\tconst panels = props.tabpanels;\r\n\t//\tconsole.log(navheads, panels);\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Tabs\r\n\t\t\t\tclassName={props.class}\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tindicatorColor=\"primary\"\r\n\t\t\t\ttextColor=\"primary\"\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t\tcentered\r\n\t\t\t>\r\n\t\t\t\t{navheads ? (\r\n\t\t\t\t\tnavheads.map((element, index) => {\r\n\t\t\t\t\t\t//\t\tconsole.log(element, index);\r\n\t\t\t\t\t\treturn <Tab label={element} key={index}></Tab>;\r\n\t\t\t\t\t})\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<Tab label=\"Please define tabheads= \"></Tab>\r\n\t\t\t\t)}\r\n\t\t\t</Tabs>\r\n\t\t\t{panels\r\n\t\t\t\t? panels.map((element, index) => {\r\n\t\t\t\t\t\t//console.log(element, index);\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<TabPanel value={value} key={index} index={index}>\r\n\t\t\t\t\t\t\t\t{element}\r\n\t\t\t\t\t\t\t</TabPanel>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t  })\r\n\t\t\t\t: null}\r\n\t\t</>\r\n\t);\r\n}\r\nNavbar.propTypes = {\r\n\tclass: PropTypes.node,\r\n\ttabheads: PropTypes.any.isRequired,\r\n\ttabpanels: PropTypes.any.isRequired,\r\n};\r\n","import React from \"react\";\nimport {\n\tTypography,\n\tmakeStyles,\n\tcreateMuiTheme,\n\tThemeProvider,\n} from \"@material-ui/core/\";\nimport About from \"./Pages/about\";\nimport Examples from \"./Pages/example\";\nimport Intro from \"./Pages/intro\";\nimport { orange, blue, red, green, blueGrey } from \"@material-ui/core/colors\";\nimport NavBar from \"./Components/navbar\";\n\nconst theme = createMuiTheme({\n\tstatus: {\n\t\tdanger: orange[500],\n\t\terror: red[500],\n\t\tsuccess: green[500],\n\t},\n\tpalette: {\n\t\tprimary: {\n\t\t\tmain: blue[400],\n\t\t\tsub: blue[400],\n\t\t},\n\t\tsecondary: {\n\t\t\tmain: orange[400],\n\t\t\tsub: blue[400],\n\t\t},\n\t\tdark: {\n\t\t\tmain: blueGrey[400],\n\t\t\tsub: blue[400],\n\t\t},\n\t},\n\tspacing: 2,\n});\n\nconst useStyles = makeStyles((theme) => ({\n\thead: {\n\t\tcolor: theme.palette.primary.main,\n\t},\n\tsubhead: {\n\t\tcolor: theme.palette.primary.sub,\n\t},\n\tnavbar: {\n\t\tcolor: theme.status.danger,\n\t},\n}));\n\nconst App = () => {\n\tconst classes = useStyles();\n\tconst tabs = {\n\t\theads: [\"About\", \"Introduction\", \"Examples\"],\n\t\tpanels: [\n\t\t\t<About classes={classes}></About>,\n\t\t\t<Intro></Intro>,\n\t\t\t<Examples></Examples>,\n\t\t],\n\t};\n\treturn (\n\t\t<div>\n\t\t\t<Typography className={classes.head} align=\"center\" variant=\"h1\">\n\t\t\t\tLeevi Kukkonen\n\t\t\t</Typography>\n\t\t\t<Typography className={classes.subhead} align=\"center\" variant=\"h5\">\n\t\t\t\tLeevi Kukkonen\n\t\t\t</Typography>\n\t\t\t<NavBar\n\t\t\t\tclass={classes.navbar}\n\t\t\t\ttabheads={tabs.heads}\n\t\t\t\ttabpanels={tabs.panels}\n\t\t\t\tstartindex={1}\n\t\t\t></NavBar>\n\t\t</div>\n\t);\n};\n\nexport default () => {\n\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<App />\n\t\t</ThemeProvider>\n\t);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}